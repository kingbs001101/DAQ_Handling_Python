# 하나의 채널에서 신호 받아오기 
# 모듈 인용하기
import nidaqmx
import matplotlib.pyplot as plt
import time

# 신호를 받아서 전압값을 저장할 데이터 리스트 생성
Data_ai0 = []
Data_ai1 = []

# 그래프 생성
fig, ax = plt.subplots()

# 제목 추가
ax.set_xlabel('Voltage')
ax.set_title('Voltages operation')

# NI DAQ mx를 통해 작업 시작
with nidaqmx.Task() as task0, nidaqmx.Task() as task1:

    # ai0 채널 접근 & 전압 읽기
    task0.ai_channels.add_ai_voltage_chan("Dev1/ai0")

    # ai1 채널 접근 & 전압 읽기
    task1.ai_channels.add_ai_voltage_chan("Dev1/ai1")

    # 반복문 조건 설정
    start_time = time.time()
    while time.time() - start_time < 30 :
        
        # ai0 채널 신호 읽어오기 (전압)
        Data_ai0.append(task0.read())
        # ai1 채널 신호 읽어오기 (전압)
        Data_ai1.append(task1.read())

        # ai0 채널 전압값 그래프에 나타내기
        ax.plot(Data_ai0, color = 'yellow')
        # ai1 채널 전압값 그래프에 나타내기
        ax.plot(Data_ai1, color = 'green')

        # 최근 데이터 50개만 보이게 하기    
        ax.set_xlim(len(Data_ai0) - 50, len(Data_ai0) + 50)

        # 반복문 한번 실행시마다 멈추기
        # 멈춰야 시각적으로 그래프 확인 가능
        # 멈추지않으면 반복문이 너무 빠르게 실행됨 
        plt.pause(0.01)

# 밑의 내용은 데이터들을 엑셀로 저장하는 내용
import pandas as pd
import os

# 데이터 리스트를 DataFrame으로 변환 (표로 나타내기 위한)
df = pd.DataFrame({'Data of ch.ai0': Data_ai0,\
                    'Data of ch.ai1': Data_ai1})                    

# 경로 이동
os.chdir(r'경로 복사해서 넣기(큰 따옴표 delete)')

# 엑셀파일로 저장
df.to_excel('제목', index=False)
